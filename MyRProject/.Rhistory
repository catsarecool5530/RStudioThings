histogram(BackpackWeight)
#Create a histogram for a variable
hist(BackpackWeight)
#look up the help for histograms
help("hist")
#adjust colors
hist(BackpackWeight, col="palegreen4")
#5-number summary
summary(BackpackWeight)
#adjust bin sizes
hist(BackpackWeight, col="palegreen4", breaks=5)
#adjust bin sizes
hist(BackpackWeight, col="palegreen4", breaks=6)
#adjust bin sizes
hist(BackpackWeight, col="palegreen4", breaks=100)
#adjust bin sizes
hist(BackpackWeight, col="palegreen4", breaks=3)
#adjust bin sizes
hist(BackpackWeight, col="palegreen4", breaks=5)
#Create a scatterplot of two variables
scatter(BackpackWeight, BackpackMass)
#Create a scatterplot of two variables
scatter(BackpackWeight, BodyMass)
#Create a scatterplot of two variables
scatterplot(BackpackWeight, BodyMass)
#Create a scatterplot of two variables
plot(BackpackWeight, BodyMass)
help("plot")
#Label the plot
plot(BackpackWeight, BodyMass, title="Awesome Scatterplot!!")
#Label the plot
plot(BackpackWeight, BodyMass, main="Awesome Scatterplot!!")
#Label the axes
plot(BackpackWeight, BodyMass, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
col(Green)
colors()
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="palegreen")
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="black")
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="black", pch=21)
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="black", pch=21)
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="black", pch=13)
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col="black", pch=19)
Backpack$Color <- ifelse(Sex="Female", "pink", "blue")
Backpack$Color <- ifelse(Sex=="Female", "pink", "blue")
Backpack$Color <- ifelse(Backpack$Sex=="Female", "pink", "blue")
Backpack$Color <- ifelse(Backpack$Sex="Female", "pink", "blue")
Backpack$Color <- ifelse(Backpack$Sex=="Female", "pink", "blue")
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col=Color, pch=19)
attack(Backpack)
attach(Backpack)
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col=Color, pch=19)
legend(col="pink")
legend("bottomleft", col="pink")
legend("bottomleft", legend=c("Female", "Male"), col=c("pink", "blue"))
legend("bottomright", legend=c("Female", "Male"), col=c("pink", "blue"))
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col=Color, pch=19)
legend("bottomright", legend=c("Female", "Male"), col=c("pink", "blue"))
legend("bottomright", legend=c("Female", "Male"), fill=c("pink", "blue"))
help("legend")
legend("bottomright", legend=c("Female", "Male"), fill=c("pink", "blue"), cex=0.5)
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col=Color, pch=19)
legend("bottomright", legend=c("Female", "Male"), fill=c("pink", "blue"), cex=0.5)
legend("bottomright", legend=c("Female", "Male"), fill=c("pink", "blue"), cex=0.75)
#Challenge2
#Add a legend to identify the sexes by their representative color
legend("bottomright", legend=c("Female", "Male"), fill=c("pink", "blue"), cex=0.75, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
plot(BackpackWeight, BodyMass, col=Color, pch=19, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
plot(BackpackWeight, BodyMass, col=ifelse(Sex=="Female", "pink", "blue"))
plot(BackpackWeight, BodyMass, col=Color, pch=19, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
plot(BackpackWeight, BodyMass, col=ifelse(Sex=="Female", "pink", "skyblue"))
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
Backpack$Color <- ifelse(Backpack$Sex=="Female", "pink", "skyblue")
attach(Backpack)
plot(BackpackWeight, BodyMass, col=Color, pch=19, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
#Challenge
#yesterday, we made a scatterplot of these data according to BackpackWeight and BodyWeight.
#Re-create this plot, but find a way to show different colors according to conditions of the variable Sex
#(Female or Male)
Backpack$Color <- ifelse(Backpack$Sex=="Female", "pink", "blue")
attach(Backpack)
plot(BackpackWeight, BodyMass, col=Color, pch=19, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
source("C:/Users/k1341914/Downloads/RStudioThings/MyRProject/Backpack.R")
plot(BackpackWeight, BodyMass, col=Color, pch=19, main="Awesome Scatterplot!!", xlab="Backpack Weight!", ylab="Body Mass")
View(sorted)
source("C:/Users/k1341914/Downloads/RStudioThings/MyRProject/Backpack.R")
data("airquality")
view(airquality)
View(airquality)
source("~/.active-rstudio-document")
backpack <- subset(backpack, select=-c("Ratio"))
backpack <- subset(backpack, select=-"Ratio")
backpack <- subset(backpack, select=-Ratio)
#remove "Ratio" column
View(backpack)
#Look up a value by [row, column]
View(backpack[1, 2])
#see values for an entire column
View(backpack$BackpackWeight)
#see values for an entire column
backpack$BackpackWeight
#divide all values by 2.2
#see bodyweight as bodymass, measured in kg
backpack$BodyMass <- backpack$BackpackWeight / 2.2
#remove "Ratio" column
View(backpack)
#Rearrange dataset so that BodyMass is 3rd column
backpack <- backpack[, c("BackpackWeight", "BodyWeight", "BodyMass", "BackProblems", "Major", "Year", "Sex", "Status", "Units")]
#Make a new column: BackpackMass
backPack$BackpackMass <- backPack$BackpackWeight / 2.2
#Make BackpackMass the 2nd column
backpack <- backpack[, c("BackpackWeight", "BackpackMass", "BodyWeight", "BodyMass", "BackProblems", "Major", "Year", "Sex", "Status", "Units")]
#Make a new column: BackpackMass
backPack$BackpackMass <- backPack$BackpackWeight / 2.2
#Make a new column: BackpackMass
backpack$BackpackMass <- backPack$BackpackWeight / 2.2
#Make BackpackMass the 2nd column
backpack <- backpack[, c("BackpackWeight", "BackpackMass", "BodyWeight", "BodyMass", "BackProblems", "Major", "Year", "Sex", "Status", "Units")]
#Make a new column: BackpackMass
backpack$BackpackMass <- backPack$BackpackWeight / 2.2
#Make a new column: BackpackMass
backpack$BackpackMass <- backpack$BackpackWeight / 2.2
#Make BackpackMass the 2nd column
backpack <- backpack[, c("BackpackWeight", "BackpackMass", "BodyWeight", "BodyMass", "BackProblems", "Major", "Year", "Sex", "Status", "Units")]
#rename column
#Arrange dataset according to ascending BackpackWeight\
backpack <- backpack[, order(backpack$BackpackWeight, decreasing=FALSE)]
#rename column
#Arrange dataset according to ascending BackpackWeight\
backpack <- backpack[order(backpack$BackpackWeight, decreasing=FALSE),]
#First, look at sort
sort(BackpackWeight)
#good to see, but doesn't rearrange
#If you wanted it sorted in descending order, you would have entered
sort(BackpackWeight, decreasing=TRUE)
# Look at the entry in the 7th row, 4th column
airquality[6, 4]
#Look at all entries for the 8th row
airwuality[7]
#Look at all entries for the 8th row
airquality[7]
# Look at all entries for the 3th column
aitquality[,2]
# Look at all entries for the 3th column
airquality[,2]
#Create a new column called “Temp C*” its in F*
View(airquality)
attack(airquality)
attach(airquality)
airquality$TempC <- 9/5 * (Temp - 32)
airquality$TempC <- 5/9 * (Temp - 32)
#Sort the dataset according to the Wind column in ascending order
airquality <- airquality(order(Wind))
#Sort the dataset according to the Wind column in ascending order
airquality <- airquality[order(Wind)]
#Sort the dataset according to the Wind column in ascending order
airquality <- airquality[order(Wind),]
#Find the mean of the wind column
mean(Wind)
#Find the median of the wind column
median(Wind)
#Find the standard deviation of the wind column
sd(Wind)
#Find the variance of the wind column
var(Wind)
#Find the 5-number summary of the wind column
summary(Wind)
#Create a stemplot for Wind
stem(Wind)
#Create a boxplot for Wind
box(Wind)
#Create a histogram for Wind
hist(Wind)
help("hist")
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=7)
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=100)
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=5)
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=6)
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=7)
#Adjust histogram so that there are 5 – 8 bins
hist(Wind, breaks=6)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp)
#Add a title to the scatterplot
title(main="MY plot")
#Add a title to the scatterplot
title(main="Wind vs Temp (F)")
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp)
#Add a title to the scatterplot
title(main="Wind vs Temp (F)")
#Assign different colors in the scatterplot according to the condition of the variable “Color”
#Add a legend to distinguish the colors
col(Color)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=Color)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=Color, pcr=19)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=Color, pch=19)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=SWITCH(Solar.R <= 50, "red", Solar.R < 100, "blue", "green"), pch=19)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=switch(Solar.R <= 50, "red", Solar.R < 100, "blue", "green"), pch=19)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=ifelse(Solar.R <= 50, "red", ifelse(Solar.R < 100, "blue", "green")), pch=19)
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, col=ifelse(Solar.R <= 50, "red", ifelse(Solar.R < 200, "blue", "green")), pch=19)
#Add a title to the scatterplot
title(main="Wind vs Temp (F)")
airquality$Color <- ifelse(Solar.R <= 50, "red", ifelse(Solar.R < 200, "blue", "green"))
#Create a scatterplot for Wind vs Temp F*
plot(Wind, Temp, pch=19)
plot(Wind, Temp, pch=19, col=Color)
#Add a legend to distinguish the colors
legend("topright", legend=c("Low Solar Power", "Medium Solar Power", "High Solar Power"))
plot(Wind, Temp, pch=19, col=airquality$Color)
#Add a legend to distinguish the colors
legend("topright", legend=c("Low Solar Power", "Medium Solar Power", "High Solar Power"), cex=0.5)
#Add a legend to distinguish the colors
legend("topright", legend=c("Low Solar Power", "Medium Solar Power", "High Solar Power"), cex=0.5, fill=c("red", "blue", "green"))
source("C:/Users/k1341914/Downloads/RStudioThings/MyRProject/AirQuality.R")
#Load and attach the BirdNest data
BirdNest <- read.csv(file.choose(), header=TRUE)
attach(BirdNest)
View(BirdNest)
# Look at the entry in the 28th row, 4th column
BirdNest[1, 1]
BirdNest[28]
BirdNest[28,]
BirdNest[, 4]
BirdNest$TotalCare <- Incubate + Nestling
attach(BirdNest)
BirdNest <- BirdNest[order(TotalCare, decreasing=FALSE)]
BirdNest <- BirdNest[order(TotalCare, decreasing=FALSE),]
mean(TotalCare)
median(TotalCare)
sd(TotalCare)
var(TotalCare)
summary(TotalCare)
stem(TotalCare)
boxplot(TotalCare)
hist(TotalCare)
hist(TotalCare, breaks=c(20, 25, 30, 35))
hist(TotalCare, breaks=c(15, 20, 25, 30, 35))
hist(TotalCare, breaks=c(15, 20, 25, 30, 35, 40))
plot(NoEggs, Length)
title(main="Number of Eggs vs. Length")
color(col=Color)
plot(NoEggs, Length, col=IFELSE(Color==1, "red", "blue"))
plot(NoEggs, Length, col=ifelse(Color==1, "red", "blue"))
plot(NoEggs, Length, col=ifelse(Color==1, "red", "blue"), main="Number of Eggs vs. Length")
plot(NoEggs, Length, col=ifelse(Color==1, "red", "blue"), main="Number of Eggs vs. Length", pch=19)
legend(legend=c("Color 1", "Color 2"), fill=c("red", "blue"), cex = 0.5)
legend("TOPRIGHT", legend=c("Color 1", "Color 2"), fill=c("red", "blue"), cex = 0.5)
legend("topright", legend=c("Color 1", "Color 2"), fill=c("red", "blue"), cex = 0.5)
legend("topright", legend=c("Color 1", "Color 2"), fill=c("red", "blue"), cex = 1)
legend("topright", legend=c("Color 1", "Color 2"), fill=c("red", "blue"), cex = 0.9)
source("C:/Users/k1341914/Downloads/RStudioThings/MyRProject/Test2.R")
help("~")
#load weightloss4 file
weightloss=read.csv(file.choose(), header=T)
attach(weightloss)
View(weightloss)
#produce cooperative boxplots
boxplot(WeightLoss~Group)
#produce cooperative dotplots
stripchart(WeightLoss~Group, method="stack", pch=20, cex=1.5)
#find the n, mean, and sd for each condition
#We could find each item individually
# note the double equals sign...
# a single equals sign is an arithmetic operator
# a double equals sign is a logical operator (tests True/False)
mu.Control=mean(WeightLoss[Group=="Control"])
#OR use tapply function to see both conditions at once
tapply(WeightLoss, Group, length)
tapply(WeightLoss, Group, mean)
tapply(WeightLoss, Group, sd)
#Create a table for the n, mean, and sd according to condition
n=tapply(WeightLoss, Group, length)
mean=tapply(WeightLoss, Group, mean)
SD=tapply(WeightLoss, Group, sd)
cbind(n, mean, SD)
#round table output to 2 decimal places
round(cbind(n, mean, SD),2)
#t-test
t.test(WeightLoss~Group)
#Look at Residuals (many steps to follow)
# Treat Group condition as numeric (Control=0 and Incentive=1)
# Place the numeric condition in a new column called GroupNumeric
GroupNumeric=as.numeric(Group=="Incentive")
mu.control=mean(WeightLoss[GroupNumeric==0])
mu.incentive=mean(WeightLoss[GroupNumeric==1])
# Now we're taking steps to make a column that will contain the correct mean for the condition of
Group variable
#produce cooperative boxplots
boxplot(WeightLoss~Group)
help("tapply")
#OR use tapply function to see both conditions at once
tapply(WeightLoss, Group, length)
tapply(WeightLoss, Group, mean)
tapply(WeightLoss, Group, sd)
#Create a table for the n, mean, and sd according to condition
n=tapply(WeightLoss, Group, length)
n
help("cbind")
#round table output to 2 decimal places
round(cbind(n, mean, SD),2)
#t-test
t.test(WeightLoss~Group)
#Look at Residuals (many steps to follow)
# Treat Group condition as numeric (Control=0 and Incentive=1)
# Place the numeric condition in a new column called GroupNumeric
GroupNumeric=as.numeric(Group=="Incentive")
GroupNumeric
mu.control=mean(WeightLoss[GroupNumeric==0])
mu.incentive=mean(WeightLoss[GroupNumeric==1])
mu
mu.control
ls()
# Now we're taking steps to make a column that will contain the correct mean for the condition of
# Group variable
Fit=mu.control*(1-GroupNumeric)+mu.incentive*GroupNumeric
Fit
# Find Residuals (Difference from observed values and mean)
Resid=WeightLoss-Fit
# Put them all together
cbind(WeightLoss, Fit, Resid)
#We already have t-statistic, but we can also calculate it manually
# compare each result with the computer output from the t-test
sdc=sd(WeightLoss[Group=="Control"])
sdi=sd(WeightLoss[Group=="Incentive"])
nc=length(WeightLoss[Group=="Control"])
ni=length(WeightLoss[Group=="Incentive"])
t.stat=(mu.control-mu.incentive)/sqrt(sdc^2/nc+sdi^2/ni)
#Check the Residuals
# The qqnorm function computes a normal probability plot
# The qqline function adds a reference line to this plot to help assess the straightness of the normal
plot
qqnorm(Resid[Group=="Control"], ylab="Control Residuals")
qqline(Resid[Group=="Control"])
qqnorm(Resid[Group=="Incentive"], ylab="Incentive Residuals")
qqline(Resid[Group=="Incentive"])
#Effect size
#We know from the p-value that the difference of 11.76 pounds is too big to be
#due to the random assignment of subjects to groups (chance).
#We know from the margin of error that with 95% confidence, the incentive is worth
#between 5.5 and 18.1 pounds.
#What we don't know yet is how much of a difference 11.76 pounds actually matters.
#The effect size is the ratio of observed differences (differences in means) to the
#standard deviation for person-to-person differences (pooled sd)
#=(abs(mu1-mu2))/(pooled sd)
#numerator
num=abs(mu.control-mu.incentive)
#denominator
den=sqrt(((nc-1)*sdc^2+(ni-1)*sdi^2)/(nc+ni-2))
effect=num/den
effect
#This tells us that the effect of the incentive is 127% as big as the typical size of
#This tells us that the effect of the incentive is 127% as big as the typical size of
#This tells us that the effect of the incentive is 127% as big as the typical size of
#This tells us that the effect of the incentive is 127% as big as the typical size of
#This tells us that the effect of the incentive is 127% as big as the typical size of
#Create a table for the n, mean, and sd according to condition
n=tapply(WeightLoss, Group, length)
n
cbind(n, mean, SD)
#round table output to 2 decimal places
round(cbind(n, mean, SD),2)
#t-test
t.test(WeightLoss~Group)
#produce cooperative dotplots
stripchart(WeightLoss~Group, method="stack", pch=20, cex=1.5)
#produce cooperative boxplots
boxplot(WeightLoss~Group)
Porsche = read.csv(file.choose());
View(Porsche);
dim(Porsche)
#Check the column names
colnames(porsche)
porsche = read.csv(file.choose());
View(porsche);
#View the dimensions (rows x columns)
dim(porsche)
#Check the column names
colnames(porsche)
#Look at the first few records
head(porsche)
#Attach the file so that we can more easily refer to variable names
attach(porsche)
#Look at a plot of mileage and price
plot(Mileage, Price)
#The data appear to be distributed in a roughly linear configuration
#with a negative trend
#Use R's lm function to see the linear model (the defined equation for y-hat)
#Store the linear model as porsche.lm
porsche.lm=lm(Price~Mileage)
#The lm function returns a list with a lot of useful information
length(porsche.lm)
names(porsche.lm)
#View the linear model
porsche.lm
#Other ways to see this information
porsche.lm$coefficients
porsche.lm$coef
#This tells us that the line of best fit for our sample data is pricehat=71.0905 - .5894(Mileage)
#View the regression line
abline(porsche.lm,)
help('abline')
#You can also write abline by giving any intercept and slope such as
#abline(71.0905, -.5894)
#Add a horizontal, dotted line at the mean price level
abline(h=mean(Price), lty=3, col="red")
#lty gives characteristics of the line (line type)
#lty1 = solid
#lty2 = dashed
#lty3 = dotted
#lty4 = dot-dash
#lty5 = long dash
#Look at the fitted values and residuals
cbind(Mileage, Price, porsche.lm$fitted.values, porsche.lm$residuals)
#Do the same thing, but only look at the first 5 rows
cbind(Mileage, Price, porsche.lm$fitted.values, porsche.lm$residuals)[1:5,]
#Or use the head function to look at the top of the dataset
head(cbind(Mileage, Price, porsche.lm$fitted.values, porsche.lm$residuals))
#Save the table
porsche.lm.table=data.frame(cbind(Mileage, Price, porsche.lm$fitted.values, porsche.lm$residuals))
View(porsche.lm.table)
#View column names
colnames(porsche.lm.table)
#change the names of columns 3 and 4
names(porsche.lm.table)[c(3,4)]=c("fits", "resids")
#check your work
str(porsche.lm.table)
#summary
summary(porsche.lm)
help('abline')
#The data appear to be distributed in a roughly linear configuration
#with a negative trend
#Use R's lm function to see the linear model (the defined equation for y-hat)
#Store the linear model as porsche.lm
porsche.lm=lm(Price~Mileage)
#The lm function returns a list with a lot of useful information
length(porsche.lm)
names(porsche.lm)
#View the linear model
porsche.lm
#Other ways to see this information
porsche.lm$coefficients
porsche.lm$coef
#This tells us that the line of best fit for our sample data is pricehat=71.0905 - .5894(Mileage)
#View the regression line
abline(porsche.lm,)
source("C:/Users/k1341914/Downloads/RStudioThings/MyRProject/PorscheLinReg.R")
help('lm')
install.packages("tidyverse")
1+2
library(tidyverse)
