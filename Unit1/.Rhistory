Data <- read.csb(file.choose())
Data <- read.csv(file.choose())
attach(Data)
View(Data)
plot(Time, Voltage)
plot(Time, resid(Data.lm))
Data.lm = lm(Voltage ~ Time)
plot(Time, resid(Data.lm))
abline(0, 0)
plot(Time, Voltage)
abline(Data.lm.coeff)
plot(Time, resid(Data.lm))
abline(0, 0)
Voltage = log(Voltage)
plot(Time, Voltage)
logForm = lm(Voltage ~ Time)
logForm
?log
plot(resid(logForm) ~ Time)
plot(Time, resid(logForm))
plot(Time, Voltage)
plot(Time, resid(logForm))
plot(Time, Voltage)
abline(logForm)
plot(Time, resid(logForm))
abline(0,0)
plot(Data.Voltage, Time)
plot(Data$Voltage, Time)
plot(Time, resid(logForm))
abline(0,0)
plot(log(Time), resid(logForm))
doubleLog <- lm(Voltage ~ log(Time))
plot(log(Time), resid(logForm))
plot(Time, resid(logForm))
plot(Time, resid(logForm))
abline(0,0)
library(ggplot2)
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point()
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point() +
geom_smooth()
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point() +
geom_smooth(lm)
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point() +
geom_smooth(aes(mapping=lm))
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point() +
geom_smooth(aes(method='lm'))
ggplot(Data, aes(x=Time, y=Voltage)) +
geom_point() +
geom_smooth(method='lm')
ggplot(Data, aes(x=Time, y=log(Voltage)) +
ggplot(Data, aes(x=Time, y=log(Voltage))) +
geom_point() +
geom_smooth(method='lm')
ggplot(Data, aes(x=Time, y=log(Voltage)) +
library(ggplot2)
ggplot(Data, aes(x=Time, y=log(Voltage)) +
geom_smooth(method='lm')
ggplot(Data, aes(x=Time, y=log(Voltage))) +
ggplot(Data, aes(x=Time, y=log(Voltage))) +
geom_point()
Data$logVolt = log(Data$Voltage)
ggplot(Data, aes(x=Time, y=logVolt)) +
geom_point()
ggplot(Data, aes(x=Time, y=logVolt)) +
geom_point() +
geom_smooth(method='lm')
plot(logForm)
plot(logForm)
ggplot(Data, aes(x=Time, y=logVolt)) +
geom_point() +
geom_smooth(method='lm')
Data$resid <- resid(logForm)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point() +
abline(0,0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point() +
geom_hline()
ggplot(Data, aes(x=Time, y=resid)) +
geom_point() +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=19) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=20) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=19) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=18) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=1) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point(pch=19) +
geom_hline(yintercept = 0)
ggplot(Data, aes(x=Time, y=resid)) +
geom_point() +
geom_hline(yintercept = 0)
install.packages('gridExtra')
plot1 <- ggplot(Data, aes(x=Time, y=logVolt)) +
geom_point() +
geom_smooth(method='lm')
plot2 <- ggplot(Data, aes(x=Time, y=resid)) +
geom_point() +
geom_hline(yintercept = 0)
library(gridExtra)
grid.arrange(plot1, plot2)
MetroHealth83 <- read.csv(file.choose())
View(MetroHealth83)
MetroHealth <- MetroHealth[,c(1,2,4)]
MetroHealth <- MetroHealth83[,c(1,2,4)]
View(MetroHealth)
attach(MetroHealth)
# The par function helps us control a wide variety of graphical parameters, such as
# line style,
# plotting character,
# axes,
# color, and on and on.
# The command par(mfrow = c(2,2)) partitions our graphics window into a 2-by-2 panel of panels,
# so we can get 4 graphs on a single window.
par(mfrow=c(2,2))
plot(NumHospitals, NumMDs,main="Scatterplot of MDs vs. Hospitals")
plot(NumHospitals, NumMDs,main="Scatterplot of MDs vs. Hospitals")
plot(NumHospitals, NumMDs,main="Scatterplot of MDs vs. Hospitals")
# fit model
MetroHealth.lm1 <- lm(NumMDs ~ NumHospitals)
# Add line to scatterplot
abline(MetroHealth.lm1)
# Look at scatterplot of residuals
plot(MetroHealth.lm1$fit, MetroHealth.lm1$resid, main="Residuals vs. Fits")
abline(h=0)
# Look at distribution of residuals
hist(MetroHealth.lm1$resid, main="Histogram of Residuals")
# Assess the distribution of residuals
qqnorm(MetroHealth.lm1$resid)
qqline(MetroHealth.lm1$resid)
# return to single graph window
par(mfrow=c(1,1))
#The R code below fits the square-root model and produces the diagnostic plots.
# Create the square-rooted variable
SqrtMDs = sqrt(NumMDs)
# Add it to the data frame
MetroHealth.df = data.frame(MetroHealth,SqrtMDs)
# Check that it got added
dim(MetroHealth.df)
#Check column names
names(MetroHealth.df)
MetroHealth.lm2 = lm(SqrtMDs ~ NumHospitals)
par(mfrow=c(2,2))
plot(NumHospitals, SqrtMDs)
abline(MetroHealth.lm2)
plot(MetroHealth.lm2$fit, MetroHealth.lm2$resid)
abline(h=0)
hist(MetroHealth.lm2$resid)
qqnorm(MetroHealth.lm2$resid)
qqline(MetroHealth.lm2$resid)
par(mfrow=c(1,1))
# This new data frame becomes the second argument in the second line of code.
# This line tells the predict function to use the model MetroHealth.lm1
# and make two predictions.
# The third line of code asks to predict at the same values of 18 and 6,
# this time using the model MetroHealth.lm2.
# Since this model was for the square-rooted data, we must square the results
# to get back to the predicted number of doctors.
# In both cases, the predictions are less than the predictions when using
# the simple linear model on the untransformed data.
# define the data frame to predict at.
new.data = data.frame(NumHospitals=c(18,6))
predict(MetroHealth.lm1,new=new.data)
predict(MetroHealth.lm2,new=new.data)^2
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
min(NumHospitals)
max(NumHospitals)
xx = seq(2,32,length=101)
#Use the values from the MetroHealth.lm2 list to define your yy function
coef(MetroHealth.lm2)
yy = (14.033 +2.915*xx)^2
points(xx,yy,type="l")
# added to the scatterplot, but the argument is asking to replace
# the individual points with a broken line connecting these points.
# The value of the type argument here is a lower case, not an upper case, L,
# and not the numeral 1.
# There is nothing magical about 101 in this example,
# you just want to pick enough points so the curve looks like a smooth curve
# and not the succession of line segments, which in reality it is.
# Separate Example: A mathematical function.
# We can also graph a mathematical function by itself, not fitted to a scatterplot.
# Here is an example of code to graph the function y = x^2 + x − 1 on the domain x = [−2, 2].
x = seq(-2,2,length=101)
y = x^2 + x -1
plot(x,y,type="l")
abline(h=0, lty = 2)
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
min(NumHospitals)
max(NumHospitals)
xx = seq(2,32,length=101)
#Use the values from the MetroHealth.lm2 list to define your yy function
coef(MetroHealth.lm2)
yy = (14.033 +2.915*xx)^2
points(xx,yy,type="l")
predict(MetroHealth.lm1,new=new.data)
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
old.data = data.frame(NumHospitals)
points(NumHospitals, predict(MetroHealth.lm2, old.data)^2)
points(NumHospitals, predict(MetroHealth.lm2, old.data)^2, type='l')
sort(NumHospitals)
old.data = data.frame(NumHospitals)
old.data = data.frame(sort(NumHospitals)
old.data = data.frame(sort(NumHospitals))
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
old.data = data.frame(sort(NumHospitals))
points(NumHospitals, predict(MetroHealth.lm2, old.data)^2, type='l')
old.data
points(sort(NumHospitals), predict(MetroHealth.lm2, old.data)^2, type='l')
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
old.data = data.frame(sort(NumHospitals))
old.data
points(sort(NumHospitals), predict(MetroHealth.lm2, old.data)^2, type='l')
xx = seq(2,32,length=101)
# Adding the Fitted Quadratics—Using R to Draw Curves
# We conclude this section on diagnostics by showing how R can create the scatterplot
# in the original scale with the fitted quadratic superimposed.
# This code suggests a general approach to fitting or drawing curves,
# which we illustrate with a second example.
# Note the main argument in the plot function, which puts a title on the plot.
plot(NumHospitals, NumMDs, main="Doctors vs. Hospitals with Quadratic Fit")
newer.data = data.frame(NumHospitals = xx)
yy = predict(MetroHealth.lm2, new=newer.data)
points(xx,yy,type="l")
yy = predict(MetroHealth.lm2, new=newer.data)^2
points(xx,yy,type="l")
